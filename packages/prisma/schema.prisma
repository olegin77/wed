generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PAIR
  VENDOR
  ADMIN
  MODERATOR
}

enum EnquiryStatus {
  NEW
  QUOTE_SENT
  CONTRACT_SIGNED
  WON
  LOST
}

enum RSVPStatus {
  INVITED
  GOING
  DECLINED
  NO_RESPONSE
}

enum AvailabilityStatus {
  OPEN
  BUSY
  LATE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?  @unique
  role         Role
  locale       String   @default("ru")
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  vendors    Vendor[]
  couple     Couple?
  prefs        UserPrefs?
}

model UserPrefs {
  userId   String  @id
  user     User    @relation(fields: [userId], references: [id])
  cities   String? // JSON: ["Tashkent","Samarkand"]
  cats     String? // JSON: ["venues","photo"]
  budgetUZS Int?
  updatedAt DateTime @default(now())
}

model Couple {
  id          String   @id @default(cuid())
  userId      String   @unique
  weddingDate DateTime?
  city        String?
  preferences Json?
  user        User     @relation(fields: [userId], references: [id])
  guests      Guest[]
  tables      Table[]
  budget      BudgetItem[]
  website     Website?
}

model Vendor {
  id            String   @id @default(cuid())
  ownerUserId   String
  type          String
  title         String
  city          String
  address       String?
  priceFrom     Int?
  rating        Float    @default(0)
  verified      Boolean  @default(false)
  profileScore  Int      @default(0)
  media         Json?
  docs          Json?
  owner         User     @relation(fields: [ownerUserId], references: [id])
  venues        Venue[]
  offers        Offer[]
  availabilities AvailabilitySlot[]
}

model Venue {
  id          String  @id @default(cuid())
  vendorId    String
  title       String
  capacityMin Int?
  capacityMax Int?
  features    Json?
  vendor      Vendor  @relation(fields: [vendorId], references: [id])
  @@index([capacityMin, capacityMax])
}

model AvailabilitySlot {
  id        String            @id @default(cuid())
  vendorId  String
  venueId   String?
  date      DateTime
  status    AvailabilityStatus
  vendor    Vendor            @relation(fields: [vendorId], references: [id])
  venue     Venue?            @relation(fields: [venueId], references: [id])
  @@index([vendorId, date])
}

model Offer {
  id           String    @id @default(cuid())
  vendorId     String
  title        String
  description  String?
  price        Int?
  validFrom    DateTime?
  validTo      DateTime?
  isHighlighted Boolean  @default(false)
  vendor       Vendor    @relation(fields: [vendorId], references: [id])
}

model Enquiry {
  id        String        @id @default(cuid())
  coupleId  String
  vendorId  String
  venueId   String?
  eventDate DateTime?
  guests    Int?
  budget    Int?
  status    EnquiryStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  couple    Couple        @relation(fields: [coupleId], references: [id])
  vendor    Vendor        @relation(fields: [vendorId], references: [id])
  venue     Venue?        @relation(fields: [venueId], references: [id])
  notes     EnquiryNote[]
  reviews   Review[]
  @@index([status, eventDate])
}

model EnquiryNote {
  id        String   @id @default(cuid())
  enquiryId String
  authorId  String
  text      String
  createdAt DateTime @default(now())
  enquiry   Enquiry  @relation(fields: [enquiryId], references: [id])
}

model Review {
  id               String  @id @default(cuid())
  enquiryId        String  @unique
  rating           Int
  text             String?
  isPublished      Boolean @default(false)
  moderationStatus String?
  enquiry          Enquiry @relation(fields: [enquiryId], references: [id])
}

model Guest {
  id      String    @id @default(cuid())
  coupleId String
  name    String
  phone   String?
  email   String?
  diet    String?
  plusOne Boolean  @default(false)
  status  RSVPStatus @default(INVITED)
  couple  Couple   @relation(fields: [coupleId], references: [id])
  tableId String?
  table   Table?   @relation(fields: [tableId], references: [id])
  @@index([coupleId, status])
}

model Table {
  id      String  @id @default(cuid())
  coupleId String
  name    String
  seats   Int
  sort    Int     @default(0)
  couple  Couple  @relation(fields: [coupleId], references: [id])
  guests  Guest[]
}

model BudgetItem {
  id      String  @id @default(cuid())
  coupleId String
  category String
  planned  Int     @default(0)
  actual   Int     @default(0)
  note    String?
  couple  Couple  @relation(fields: [coupleId], references: [id])
}

model Website {
  id                String @id @default(cuid())
  coupleId          String @unique
  slug              String @unique
  themeId           String
  isPublished       Boolean @default(false)
  rsvpPublicEnabled Boolean @default(true)
  couple            Couple @relation(fields: [coupleId], references: [id])
  rsvps             RSVP[]
}

model RSVP {
  id        String    @id @default(cuid())
  websiteId String
  guestId   String?
  name      String
  contact   String?
  response  RSVPStatus
  message   String?
  createdAt DateTime  @default(now())
  website   Website   @relation(fields: [websiteId], references: [id])
}

model AuditEvent {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  type      String
  data      Json?
  byUserId  String?
  createdAt DateTime @default(now())
}

model RankSignal {
  id         String   @id @default(cuid())
  vendorId   String
  venueId    String?
  signalType String
  weight     Float    @default(0)
  ttl        DateTime?
  @@index([vendorId, signalType])
}
