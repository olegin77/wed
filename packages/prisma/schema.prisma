generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  PAIR
  VENDOR
  ADMIN
  MODERATOR
}

enum EnquiryStatus {
  NEW
  QUOTE_SENT
  CONTRACT_SIGNED
  WON
  LOST
}

enum RSVPStatus {
  INVITED
  GOING
  DECLINED
  NO_RESPONSE
}

enum AvailabilityStatus {
  OPEN
  BUSY
  LATE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  phone        String?  @unique
  role         Role
  locale       String   @default("ru")
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  couple  Couple?
  vendors Vendor[]
  bookings Booking[]
  slotLocks SlotLock[] @relation("UserSlotLocks")
}

model Couple {
  id           String      @id @default(cuid())
  userId       String      @unique
  weddingDate  DateTime?
  city         String?
  preferences  Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  guests   Guest[]
  tables   Table[]
  budget   BudgetItem[]
  website  Website?
  enquiries Enquiry[]
}

model Vendor {
  id            String            @id @default(cuid())
  ownerUserId   String
  type          String
  title         String
  city          String
  address       String?
  priceFrom     Int?
  rating        Float?            @default(0)
  verified      Boolean           @default(false)
  profileScore  Int               @default(0)
  media         Json?
  docs          Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  owner         User              @relation(fields: [ownerUserId], references: [id])
  venues        Venue[]
  offers        Offer[]
  availabilities AvailabilitySlot[]
  enquiries     Enquiry[]
  rankSignals   RankSignal[]
  bookings      Booking[]
  slotLocks     SlotLock[]
}

model Venue {
  id          String  @id @default(cuid())
  vendorId    String
  title       String
  capacityMin Int?
  capacityMax Int?
  features    Json?

  vendor Vendor @relation(fields: [vendorId], references: [id])
  slots  AvailabilitySlot[]
  enquiries Enquiry[]
  rankSignals RankSignal[]

  @@index([capacityMin, capacityMax])
}

model AvailabilitySlot {
  id       String             @id @default(cuid())
  vendorId String
  venueId  String?
  date     DateTime
  status   AvailabilityStatus

  vendor Vendor @relation(fields: [vendorId], references: [id])
  venue  Venue? @relation(fields: [venueId], references: [id])

  @@index([vendorId, date])
}

model Offer {
  id            String   @id @default(cuid())
  vendorId      String
  title         String
  description   String?
  price         Int?
  validFrom     DateTime?
  validTo       DateTime?
  isHighlighted Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])
}

model Enquiry {
  id         String         @id @default(cuid())
  coupleId   String
  vendorId   String
  venueId    String?
  eventDate  DateTime?
  guests     Int?
  budget     Int?
  status     EnquiryStatus  @default(NEW)
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  couple Couple @relation(fields: [coupleId], references: [id])
  vendor Vendor @relation(fields: [vendorId], references: [id])
  venue  Venue? @relation(fields: [venueId], references: [id])
  notes  EnquiryNote[]
  reviews Review[]
  booking Booking?

  @@index([status, eventDate])
}

model EnquiryNote {
  id        String   @id @default(cuid())
  enquiryId String
  authorId  String
  text      String
  createdAt DateTime @default(now())

  enquiry Enquiry @relation(fields: [enquiryId], references: [id])
}

model Review {
  id              String  @id @default(cuid())
  enquiryId       String  @unique
  rating          Int
  text            String?
  isPublished     Boolean @default(false)
  moderationStatus String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  enquiry Enquiry @relation(fields: [enquiryId], references: [id])
}

model Guest {
  id        String     @id @default(cuid())
  coupleId  String
  name      String
  phone     String?
  email     String?
  diet      String?
  plusOne   Boolean    @default(false)
  status    RSVPStatus @default(INVITED)
  tableId   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  couple Couple @relation(fields: [coupleId], references: [id])
  table  Table?  @relation(fields: [tableId], references: [id])
  rsvps  RSVP[]

  @@index([coupleId, status])
}

model Table {
  id        String  @id @default(cuid())
  coupleId  String
  name      String
  seats     Int
  sort      Int     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  couple Couple @relation(fields: [coupleId], references: [id])
  guests Guest[]
}

model BudgetItem {
  id        String  @id @default(cuid())
  coupleId  String
  category  String
  planned   Int     @default(0)
  actual    Int     @default(0)
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  couple Couple @relation(fields: [coupleId], references: [id])
}

model Website {
  id                String   @id @default(cuid())
  coupleId          String   @unique
  slug              String   @unique
  themeId           String
  isPublished       Boolean  @default(false)
  rsvpPublicEnabled Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  couple Couple @relation(fields: [coupleId], references: [id])
  rsvps  RSVP[]
}

model RSVP {
  id         String     @id @default(cuid())
  websiteId  String
  guestId    String?
  name       String
  contact    String?
  response   RSVPStatus
  message    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  website Website @relation(fields: [websiteId], references: [id])
  guest   Guest?   @relation(fields: [guestId], references: [id])
}

model AuditEvent {
  id        String   @id @default(cuid())
  entity    String
  entityId  String
  type      String
  data      Json?
  byUserId  String?
  createdAt DateTime @default(now())
}

model RankSignal {
  id         String   @id @default(cuid())
  vendorId   String
  venueId    String?
  signalType String
  weight     Float    @default(0)
  ttl        DateTime?
  createdAt  DateTime @default(now())

  vendor Vendor @relation(fields: [vendorId], references: [id])
  venue  Venue?  @relation(fields: [venueId], references: [id])

  @@index([vendorId, signalType])
}

enum BookingStatus {
  PENDING_PAYMENT
  PAID
  CANCELED
}

model Booking {
  id        String         @id @default(cuid())
  vendorId  String
  userId    String
  enquiryId String?        @unique
  startAt   DateTime
  endAt     DateTime
  status    BookingStatus  @default(PENDING_PAYMENT)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  vendor  Vendor  @relation(fields: [vendorId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  enquiry Enquiry? @relation(fields: [enquiryId], references: [id])

  @@index([vendorId, startAt, endAt])
}

model SlotLock {
  id          String   @id @default(cuid())
  vendorId    String
  startAt     DateTime
  endAt       DateTime
  lockedUntil DateTime
  byUserId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  vendor Vendor @relation(fields: [vendorId], references: [id])
  byUser User?  @relation("UserSlotLocks", fields: [byUserId], references: [id])

  @@index([vendorId, startAt, endAt])
}
